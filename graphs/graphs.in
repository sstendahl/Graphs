#!/usr/bin/env python3

# Graphs
# Plot and manipulate data
#
# @HOMEPAGE_URL@
# @VCS_URL@
#
# Copyright @COPYRIGHT@ The Graphs Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later
"""Main graphs module."""

import asyncio
import gettext
import locale
import logging
import os
import signal
import sys

if __name__ == "__main__":
    import gi

    gi.require_version("Adw", "1")
    gi.require_version("Gtk", "4.0")
    gi.require_version("Graphs", "1")

    graph_path_dir = "@PKGDATADIR@"
    if os.environ.get("GRAPHS_DEVEL_PATH"):
        graph_path_dir = os.environ.get("GRAPHS_DEVEL_PATH")
    sys.path.insert(1, graph_path_dir)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    localedir = "@LOCALEDIR@"
    if os.environ.get("GRAPHS_OVERRIDE_LOCALEDIR"):
        localedir = os.environ.get("GRAPHS_OVERRIDE_LOCALEDIR")
    locale.bindtextdomain("@GETTEXT_PACKAGE@", localedir)
    locale.textdomain("@GETTEXT_PACKAGE@")
    gettext.bindtextdomain("@GETTEXT_PACKAGE@", localedir)
    gettext.textdomain("@GETTEXT_PACKAGE@")

    from gi.repository import Gio
    gresource_location = os.path.join(
        "@PKGDATADIR@",
        "@APPLICATION_ID@.gresource",
    )
    if os.environ.get("GRAPHS_OVERRIDE_RESOURCES"):
        gresource_location = os.environ.get("GRAPHS_OVERRIDE_RESOURCES")
    resource = Gio.Resource.load(gresource_location)
    resource._register()

    loglevel = logging.DEBUG if "@DEBUG@" == "True" else logging.INFO
    logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
    logging.getLogger("matplotlib.font_manager").disabled = True

    from gi.events import GLibEventLoopPolicy
    asyncio.set_event_loop_policy(GLibEventLoopPolicy())

    from graphs.application import PythonApplication
    application = PythonApplication(
        application_id="@APPLICATION_ID@",
        flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE
        | Gio.ApplicationFlags.HANDLES_OPEN,
    )
    sys.exit(application.run(sys.argv))
